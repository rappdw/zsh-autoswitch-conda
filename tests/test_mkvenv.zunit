#!/usr/bin/env zunit

@setup {

    export DISABLE_AUTOSWITCH_VENV="1"
    PYTHON_VERSION="$(python --version 2>&1)"
    load "../autoswitch_conda.plugin.zsh"
    unset AUTOSWITCH_DEFAULT_REQUIREMENTS
    TARGET="$(mktemp -d)"
    cd "$TARGET"
}

@teardown {
    rm -rf "$TARGET"
}

@test 'mkvenv - does not create .venv if one exists' {
    touch .venv

    run mkvenv

    assert $status equals 0
    assert "$output" same_as ".venv file already exists. If this is a mistake use the rmvenv command"
}


@test 'mkvenv - creates .venv' {
    # mock conda function to test its inputs
    function conda {
        echo conda $@
    }

    mkdir myproject
    cd myproject

    run mkvenv --yes --quiet --no-default-packages

    assert $status equals 0
    assert "$TARGET/myproject/.venv" exists
    assert "$lines[1]" same_as "Creating \e[35mmyproject\e[0m conda environment"

    run cat "$TARGET/myproject/.venv"

    assert $status equals 0
    assert "$output" same_as "myproject"
}

@test 'mkvenv - uses default python if set and not specified' {
    # mock conda function to test its inputs
    function conda {
        echo conda $@
    }

    mkdir myproject
    cd myproject
    AUTOSWITCH_DEFAULT_PYTHON="python_foo"

    run mkvenv

    assert $status equals 0
    assert "$TARGET/myproject/.venv" exists
    # Assert mock output
    assert "$lines[2]" same_as "conda create --name myproject python=python_foo"

    run cat "$TARGET/myproject/.venv"

    assert $status equals 0
    assert "$output" same_as "myproject"
}

@test 'mkvenv - uses specified python if default set' {
    # mock virtualenv function to test its inputs
    function conda {
        echo conda $@
    }

    mkdir myproject
    cd myproject
    AUTOSWITCH_DEFAULT_PYTHON="python_foo"

    run mkvenv --python=python_bar

    assert $status equals 0
    assert "$TARGET/myproject/.venv" exists
    # Assert mock output
    assert "$lines[2]" same_as "conda create --name myproject --python=python_bar"

    run cat "$TARGET/myproject/.venv"

    assert $status equals 0
    assert "$output" same_as "myproject"
}
